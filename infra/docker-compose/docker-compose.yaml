services:
  vectorizer:
      build:
        context: ../../services/vectorizer
        dockerfile: docker/Dockerfile
      container_name: vectorizer
      depends_on:
        - kafka
        - minio
        - qdrant
      env_file:
        - ../../.env
      networks:
        - semantic-network

  ui-api:
    build:
      context: ../../services/ui-api
      dockerfile: docker/Dockerfile
    container_name: ui-api
    depends_on:
      - kafka
      - minio
    ports:
      - "9999:9999"
    env_file:
      - ../../.env
    networks:
      - semantic-network

  swagger-generator:
    image: quay.io/goswagger/swagger:0.30.5
    working_dir: /go/src/ui-api
    profiles:
      - swag
    command: generate spec -i ./api/swagger.general.yaml -o ./api/swagger.json --scan-models
    volumes:
      - ../../services/ui-api:/go/src/ui-api
    environment:
      - GO111MODULE=off

#    #  postgres:
#    image: postgres:15
#    container_name: postgres
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: ${DB_USER}
#      POSTGRES_PASSWORD: ${DB_PASSWORD}
#      POSTGRES_DB: ${DB_NAME}
#      PGSSLMODE: ${DB_SSL_MODE}
#    ports:
#      - "${DB_PORT}:${DB_PORT}"
#    volumes:
#      - pg_data:/var/lib/postgresql/data
#      - ./init:/docker-entrypoint-initdb.d

  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server --console-address ":9001" /data
    networks:
      - semantic-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - semantic-network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - semantic-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - semantic-network

  qdrant:
    image: qdrant/qdrant:v1.9.0
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - semantic-network

volumes:
  pg_data:
  minio_data:
  qdrant-data:

networks:
  semantic-network:
    driver: bridge
